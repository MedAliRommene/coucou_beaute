# üîß Script de Test pour la Correction du Workflow - Coucou Beaut√©
# Ce script teste les corrections apport√©es au workflow GitHub Actions

param(
    [string]$ServerHost = "196.203.120.35",
    [string]$ServerUser = "vpsuser",
    [int]$Port = 22
)

# Couleurs pour les messages
$Red = "`e[31m"
$Green = "`e[32m"
$Yellow = "`e[33m"
$Blue = "`e[34m"
$Cyan = "`e[36m"
$Magenta = "`e[35m"
$Reset = "`e[0m"

function Write-ColorOutput {
    param([string]$Message, [string]$Color = $Reset)
    Write-Host "${Color}${Message}${Reset}"
}

function Test-PortConnectivity {
    param([string]$Host, [int]$Port)
    
    Write-ColorOutput "`nüîç Test de connectivit√© du port $Port vers $Host..." $Cyan
    
    try {
        $tcpClient = New-Object System.Net.Sockets.TcpClient
        $connectTask = $tcpClient.ConnectAsync($Host, $Port)
        $timeoutTask = Start-Sleep -Seconds 15 -PassThru
        
        $completed = $connectTask.Wait(15000) # 15 secondes timeout
        
        if ($completed -and $tcpClient.Connected) {
            Write-ColorOutput "‚úÖ Port $Port accessible sur $Host" $Green
            $tcpClient.Close()
            return $true
        } else {
            Write-ColorOutput "‚ùå Port $Port non accessible sur $Host" $Red
            return $false
        }
    } catch {
        Write-ColorOutput "‚ùå Erreur lors du test du port : $($_.Exception.Message)" $Red
        return $false
    }
}

function Test-SSHConnection {
    param([string]$Host, [string]$User)
    
    Write-ColorOutput "`nüîç Test de connexion SSH vers $User@$Host..." $Cyan
    
    # V√©rifier si OpenSSH est disponible
    $sshPath = Get-Command ssh -ErrorAction SilentlyContinue
    if (-not $sshPath) {
        Write-ColorOutput "‚ùå OpenSSH non install√© sur cette machine" $Red
        return $false
    }
    
    # Test avec les nouveaux param√®tres optimis√©s
    $sshCommand = "ssh -o StrictHostKeyChecking=no -o ConnectTimeout=20 -o ServerAliveInterval=5 -o ServerAliveCountMax=3 -o TCPKeepAlive=yes -o BatchMode=yes -o UserKnownHostsFile=/dev/null $User@$Host 'echo \"SSH connection successful\"'"
    
    Write-ColorOutput "Commande : $sshCommand" $Blue
    
    try {
        $result = Invoke-Expression $sshCommand 2>&1
        $exitCode = $LASTEXITCODE
        
        if ($exitCode -eq 0) {
            Write-ColorOutput "‚úÖ Connexion SSH r√©ussie avec les nouveaux param√®tres" $Green
            Write-ColorOutput "R√©ponse du serveur : $result" $Green
            return $true
        } else {
            Write-ColorOutput "‚ùå √âchec de la connexion SSH (code: $exitCode)" $Red
            Write-ColorOutput "Message d'erreur : $result" $Red
            return $false
        }
    } catch {
        Write-ColorOutput "‚ùå Erreur lors du test SSH : $($_.Exception.Message)" $Red
        return $false
    }
}

function Show-WorkflowImprovements {
    Write-ColorOutput "`nüìã Am√©liorations apport√©es au workflow :" $Magenta
    Write-ColorOutput "=" * 60 $Magenta
    
    Write-ColorOutput "`n1Ô∏è‚É£ Test de Connectivit√© R√©seau :" $Cyan
    Write-ColorOutput "   ‚úÖ Test du port SSH prioritaire (plus fiable que ping)" $Green
    Write-ColorOutput "   ‚úÖ Ping ICMP optionnel (ne bloque pas si √©choue)" $Green
    Write-ColorOutput "   ‚úÖ Timeout de 15s pour le test de port" $Green
    
    Write-ColorOutput "`n2Ô∏è‚É£ Test de Connexion SSH :" $Cyan
    Write-ColorOutput "   ‚úÖ 5 tentatives au lieu de 3" $Green
    Write-ColorOutput "   ‚úÖ D√©lai progressif : 5s, 10s, 15s, 20s, 25s" $Green
    Write-ColorOutput "   ‚úÖ Timeout de connexion : 20s par tentative" $Green
    Write-ColorOutput "   ‚úÖ Param√®tres SSH optimis√©s" $Green
    
    Write-ColorOutput "`n3Ô∏è‚É£ V√©rification des Secrets :" $Cyan
    Write-ColorOutput "   ‚úÖ V√©rification de la pr√©sence des secrets requis" $Green
    Write-ColorOutput "   ‚úÖ Affichage des valeurs (masqu√©es pour la s√©curit√©)" $Green
    
    Write-ColorOutput "`n4Ô∏è‚É£ Param√®tres SSH Optimis√©s :" $Cyan
    Write-ColorOutput "   ‚úÖ ConnectTimeout=20 (au lieu de 30)" $Green
    Write-ColorOutput "   ‚úÖ ServerAliveInterval=5 (au lieu de 10)" $Green
    Write-ColorOutput "   ‚úÖ UserKnownHostsFile=/dev/null (√©vite les probl√®mes de known_hosts)" $Green
    Write-ColorOutput "   ‚úÖ TCPKeepAlive=yes (maintient la connexion)" $Green
}

function Show-ExpectedResults {
    Write-ColorOutput "`nüéØ R√©sultats attendus :" $Magenta
    Write-ColorOutput "=" * 50 $Magenta
    
    Write-ColorOutput "`n‚úÖ Le workflow devrait maintenant :" $Green
    Write-ColorOutput "   1. V√©rifier les secrets GitHub" $Blue
    Write-ColorOutput "   2. Tester le port SSH (22) - SUCC√àS" $Blue
    Write-ColorOutput "   3. Tester le ping ICMP - √âCHEC (normal, bloqu√© par le serveur)" $Blue
    Write-ColorOutput "   4. Tester la connexion SSH - SUCC√àS" $Blue
    Write-ColorOutput "   5. D√©ployer l'application - SUCC√àS" $Blue
    
    Write-ColorOutput "`n‚ö†Ô∏è  Note importante :" $Yellow
    Write-ColorOutput "   Le ping ICMP peut √©chouer (100% packet loss) car de nombreux" $Blue
    Write-ColorOutput "   serveurs de production bloquent les pings pour la s√©curit√©." $Blue
    Write-ColorOutput "   C'est normal et n'affecte pas le d√©ploiement SSH." $Blue
}

# Fonction principale
function Start-WorkflowTest {
    Write-ColorOutput "üîß Test de Correction du Workflow - Coucou Beaut√©" $Magenta
    Write-ColorOutput "=" * 60 $Magenta
    Write-ColorOutput "Ce script teste les corrections apport√©es au workflow GitHub Actions" $Blue
    Write-ColorOutput ""
    
    # Test de connectivit√© du port
    if (-not (Test-PortConnectivity -Host $ServerHost -Port $Port)) {
        Write-ColorOutput "‚ùå Test de connectivit√© du port √©chou√©" $Red
        Write-ColorOutput "Le workflow √©chouera probablement aussi." $Red
        return
    }
    
    # Test de connexion SSH
    if (Test-SSHConnection -Host $ServerHost -User $ServerUser) {
        Write-ColorOutput "`nüéâ Tests r√©ussis !" $Green
        Write-ColorOutput "Votre workflow GitHub Actions devrait maintenant fonctionner." $Green
    } else {
        Write-ColorOutput "`n‚ùå Test SSH √©chou√©" $Red
        Write-ColorOutput "V√©rifiez votre configuration SSH." $Red
    }
    
    Show-WorkflowImprovements
    Show-ExpectedResults
    
    Write-ColorOutput "`nüìã Prochaines √©tapes :" $Cyan
    Write-ColorOutput "1. Commitez et poussez les changements" $Green
    Write-ColorOutput "2. Surveillez le d√©ploiement dans GitHub Actions" $Green
    Write-ColorOutput "3. V√©rifiez que le workflow passe maintenant" $Green
}

# Lancer le test
Start-WorkflowTest
