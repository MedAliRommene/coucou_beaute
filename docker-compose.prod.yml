# ===========================================
# DOCKER COMPOSE PRODUCTION - Coucou Beauté
# ===========================================

## version field is optional in Compose v2, left out to avoid warnings

services:
  # ===========================================
  # BASE DE DONNÉES POSTGRESQL
  # ===========================================
  db:
    image: postgres:15-alpine
    container_name: coucou_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-coucou_prod}
      POSTGRES_USER: ${POSTGRES_USER:-coucou}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - coucou_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-coucou} -d ${POSTGRES_DB:-coucou_prod}" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # APPLICATION DJANGO
  # ===========================================
  web:
    build: ./backend
    container_name: coucou_web
    restart: unless-stopped
    env_file: ./backend/.env
    environment:
      - DJANGO_SETTINGS_MODULE=coucou_beaute.settings
    volumes:
      - media_data:/app/media
      - static_data:/app/static
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - coucou_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/" ]
      interval: 20s
      timeout: 10s
      retries: 8
      start_period: 120s

  # ===========================================
  # REDIS (CACHE & SESSIONS)
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: coucou_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-coucou_redis_pass}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - coucou_network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===========================================
  # NGINX (REVERSE PROXY)
  # ===========================================
  nginx:
    image: nginx:alpine
    container_name: coucou_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_data:/var/www/static:ro
      - media_data:/var/www/media:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./certbot/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      web:
        condition: service_healthy
    networks:
      - coucou_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:80/" ]
      interval: 30s
      timeout: 10s
      retries: 3
  # ===========================================
  # MONITORING (OPTIONNEL)
  # ===========================================
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: coucou_prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #   networks:
  #     - coucou_network

  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: coucou_grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   networks:
  #     - coucou_network

  # ===========================================
  # VOLUMES PERSISTANTS
  # ===========================================
volumes:
  postgres_data:
    driver: local
  media_data:
    driver: local
  static_data:
    driver: local
  redis_data:
    driver: local
  # grafana_data:
  #   driver: local

  # ===========================================
  # RÉSEAU
  # ===========================================
networks:
  coucou_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
