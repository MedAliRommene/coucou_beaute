#!/bin/bash
# Script de d√©ploiement simple et robuste

set -e  # Arr√™ter en cas d'erreur

# Configuration
PROJECT_DIR="/opt/coucou_beaute"
LOG_FILE="/var/log/coucou_deploy.log"

# Fonction de log
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

log "üöÄ D√©but du d√©ploiement..."

# Aller dans le r√©pertoire du projet
cd "$PROJECT_DIR" || {
    log "‚ùå Impossible d'acc√©der au r√©pertoire $PROJECT_DIR"
    exit 1
}

# Sauvegarder l'ancien .env
if [ -f "backend/.env" ]; then
    cp "backend/.env" "backend/.env.backup.$(date +%s)"
    log "üíæ Sauvegarde de .env"
fi

# R√©cup√©rer les derni√®res modifications
log "üì• R√©cup√©ration des modifications..."
git fetch origin main
git reset --hard origin/main

# Cr√©er le fichier .env si n√©cessaire
if [ ! -f "backend/.env" ]; then
    cp "backend/env.example" "backend/.env"
    log "‚ö†Ô∏è Fichier .env cr√©√© √† partir de env.example"
fi

# Arr√™ter les services existants
log "‚èπÔ∏è Arr√™t des services..."
docker compose -f docker-compose.prod.yml down || true

# Nettoyer les images inutilis√©es
log "üßπ Nettoyage des images Docker..."
docker system prune -f

# Reconstruire et red√©marrer
log "üî® Reconstruction et red√©marrage..."
docker compose -f docker-compose.prod.yml up -d --build

# Attendre que les services soient pr√™ts
log "‚è≥ Attente du d√©marrage des services..."
sleep 30

# V√©rifier le statut
log "üîç V√©rification du statut..."
if docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
    log "‚úÖ D√©ploiement termin√© avec succ√®s!"
    
    # Afficher les services
    docker compose -f docker-compose.prod.yml ps
    
    # Test de l'application
    if curl -f http://localhost:8000 > /dev/null 2>&1; then
        log "‚úÖ Application accessible sur http://localhost:8000"
    else
        log "‚ö†Ô∏è Application non accessible - v√©rifiez les logs"
    fi
else
    log "‚ùå Erreur lors du d√©ploiement"
    docker compose -f docker-compose.prod.yml logs
    exit 1
fi

log "üéâ D√©ploiement termin√©!"
