#!/bin/bash
# =========================================================
# COUCOU BEAUT√â - AUTO-DEPLOYMENT CRON SCRIPT
# =========================================================
# Ce script est con√ßu pour √™tre ex√©cut√© automatiquement
# par cron pour surveiller les changements git et d√©ployer
# automatiquement si n√©cessaire.
#
# Configuration cron recommand√©e:
# */15 * * * * /opt/coucou_beaute/deploy-cron.sh >> /var/log/coucou_deploy_cron.log 2>&1
# =========================================================

set -euo pipefail

# Configuration
PROJECT_DIR="/opt/coucou_beaute"
LOG_FILE="/var/log/coucou_deploy_cron.log"
LOCK_FILE="/tmp/coucou_deploy.lock"
BRANCH="main"

# Fonction de logging
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Fonction de nettoyage
cleanup() {
    rm -f "$LOCK_FILE"
}
trap cleanup EXIT

# V√©rifier qu'on n'a pas d√©j√† un d√©ploiement en cours
if [ -f "$LOCK_FILE" ]; then
    log "‚ö†Ô∏è D√©ploiement d√©j√† en cours (lock file existe). Skip."
    exit 0
fi

# Cr√©er le lock file
touch "$LOCK_FILE"

log "üîç V√©rification des mises √† jour..."

# Aller dans le r√©pertoire du projet
cd "$PROJECT_DIR" || {
    log "‚ùå Erreur: Impossible d'acc√©der √† $PROJECT_DIR"
    exit 1
}

# R√©cup√©rer les informations git
git fetch origin "$BRANCH" 2>&1 | tee -a "$LOG_FILE"

# Comparer local et remote
LOCAL=$(git rev-parse HEAD)
REMOTE=$(git rev-parse "origin/$BRANCH")

if [ "$LOCAL" = "$REMOTE" ]; then
    log "‚úÖ D√©j√† √† jour (commit: ${LOCAL:0:7}). Aucun d√©ploiement n√©cessaire."
    exit 0
fi

log "üÜï Nouveaux commits d√©tect√©s:"
log "   Local:  ${LOCAL:0:7}"
log "   Remote: ${REMOTE:0:7}"
log ""

# Afficher les commits √† d√©ployer
log "üìã Commits √† d√©ployer:"
git log --oneline "$LOCAL".."$REMOTE" | tee -a "$LOG_FILE"
log ""

# Lancer le d√©ploiement
log "üöÄ D√©marrage du d√©ploiement automatique..."
if sudo bash "$PROJECT_DIR/deploy.sh" 2>&1 | tee -a "$LOG_FILE"; then
    log "‚úÖ D√©ploiement automatique r√©ussi!"
    log "   Nouveau commit: ${REMOTE:0:7}"
    
    # Envoyer une notification (optionnel - peut √™tre configur√©)
    # curl -X POST "https://api.example.com/notify" \
    #   -d "message=Coucou Beaut√© d√©ploy√© avec succ√®s (${REMOTE:0:7})"
else
    log "‚ùå √âchec du d√©ploiement automatique!"
    log "   Veuillez v√©rifier les logs pour plus de d√©tails."
    
    # Envoyer une alerte (optionnel)
    # curl -X POST "https://api.example.com/alert" \
    #   -d "message=√âchec du d√©ploiement automatique Coucou Beaut√©"
    
    exit 1
fi

log "üéâ Auto-d√©ploiement termin√© avec succ√®s!"

