#!/bin/bash
# =========================================================
# COUCOU BEAUT√â - QUICK SETUP SCRIPT
# =========================================================
# Script d'installation rapide pour configurer:
# - Permissions correctes
# - Cron auto-d√©ploiement
# - Logs
# - Validation de l'environnement
# =========================================================

set -euo pipefail

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
PROJECT_DIR="/opt/coucou_beaute"
LOG_FILE="/var/log/coucou_deploy_cron.log"
USER="vpsuser"

# Fonctions
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

check_requirement() {
    if command -v "$1" &> /dev/null; then
        log_success "$1 install√©"
        return 0
    else
        log_error "$1 manquant"
        return 1
    fi
}

# Banner
clear
echo -e "${BLUE}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë   COUCOU BEAUT√â - QUICK SETUP          ‚ïë"
echo "‚ïë   Configuration Production Rapide      ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"
echo ""

# V√©rification: Root/Sudo
if [ "$EUID" -eq 0 ]; then
    log_warning "Script ex√©cut√© en root. Recommand√©: ex√©cuter avec sudo en tant qu'utilisateur normal."
fi

# √âtape 1: V√©rification des pr√©requis
log_info "√âtape 1/7: V√©rification des pr√©requis..."
echo ""

MISSING=0
check_requirement "docker" || MISSING=$((MISSING + 1))
check_requirement "docker-compose" || MISSING=$((MISSING + 1))
check_requirement "git" || MISSING=$((MISSING + 1))
check_requirement "curl" || MISSING=$((MISSING + 1))

if [ $MISSING -gt 0 ]; then
    log_error "$MISSING pr√©requis manquants. Veuillez les installer."
    exit 1
fi

echo ""
log_success "Tous les pr√©requis sont install√©s"
echo ""

# √âtape 2: V√©rification du r√©pertoire projet
log_info "√âtape 2/7: V√©rification du r√©pertoire projet..."
echo ""

if [ ! -d "$PROJECT_DIR" ]; then
    log_error "R√©pertoire $PROJECT_DIR introuvable"
    log_info "Clonez d'abord le projet:"
    echo "  git clone https://github.com/yourusername/coucou_beaute.git $PROJECT_DIR"
    exit 1
fi

cd "$PROJECT_DIR" || exit 1
log_success "R√©pertoire projet: $PROJECT_DIR"
echo ""

# √âtape 3: Configuration des permissions
log_info "√âtape 3/7: Configuration des permissions..."
echo ""

# Scripts ex√©cutables
for script in deploy.sh deploy-cron.sh fix-ssl-cert.sh; do
    if [ -f "$script" ]; then
        chmod +x "$script"
        log_success "$script rendu ex√©cutable"
    else
        log_warning "$script introuvable (ignor√©)"
    fi
done

echo ""

# √âtape 4: Cr√©ation du fichier de log
log_info "√âtape 4/7: Configuration des logs..."
echo ""

if [ ! -f "$LOG_FILE" ]; then
    sudo touch "$LOG_FILE"
    sudo chown "$USER:$USER" "$LOG_FILE"
    sudo chmod 644 "$LOG_FILE"
    log_success "Fichier de log cr√©√©: $LOG_FILE"
else
    log_success "Fichier de log existe: $LOG_FILE"
fi

echo ""

# √âtape 5: Configuration Cron
log_info "√âtape 5/7: Configuration du cron auto-d√©ploiement..."
echo ""

CRON_JOB="*/15 * * * * $PROJECT_DIR/deploy-cron.sh >> $LOG_FILE 2>&1"

if crontab -l 2>/dev/null | grep -q "deploy-cron.sh"; then
    log_success "T√¢che cron d√©j√† configur√©e"
else
    read -p "Configurer l'auto-d√©ploiement toutes les 15 minutes? (o/N) " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Oo]$ ]]; then
        (crontab -l 2>/dev/null; echo "$CRON_JOB") | crontab -
        log_success "T√¢che cron ajout√©e"
    else
        log_info "Auto-d√©ploiement non configur√© (vous pouvez le faire manuellement)"
    fi
fi

echo ""

# √âtape 6: Validation Docker Compose
log_info "√âtape 6/7: Validation Docker Compose..."
echo ""

if [ -f "docker-compose.prod.yml" ]; then
    log_success "docker-compose.prod.yml trouv√©"
    
    # Test de syntaxe
    if docker-compose -f docker-compose.prod.yml config > /dev/null 2>&1; then
        log_success "Configuration Docker Compose valide"
    else
        log_error "Configuration Docker Compose invalide"
        docker-compose -f docker-compose.prod.yml config
        exit 1
    fi
else
    log_error "docker-compose.prod.yml introuvable"
    exit 1
fi

echo ""

# √âtape 7: Validation Nginx
log_info "√âtape 7/7: Validation configuration Nginx..."
echo ""

if [ -f "nginx.conf" ]; then
    log_success "nginx.conf trouv√©"
else
    log_warning "nginx.conf introuvable"
fi

echo ""

# R√©sum√©
echo -e "${GREEN}"
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
echo "‚ïë   CONFIGURATION TERMIN√âE               ‚ïë"
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
echo -e "${NC}"
echo ""

log_info "üìã R√©sum√© de la configuration:"
echo ""
echo "  üìÇ Projet:           $PROJECT_DIR"
echo "  üìù Logs:             $LOG_FILE"
echo "  ü§ñ Cron:             $(crontab -l 2>/dev/null | grep -q 'deploy-cron.sh' && echo 'Configur√© ‚úÖ' || echo 'Non configur√© ‚ö†Ô∏è')"
echo "  üê≥ Docker:           Valid√© ‚úÖ"
echo ""

log_info "üöÄ Prochaines √©tapes:"
echo ""
echo "  1. D√©ployer manuellement:"
echo "     sudo bash $PROJECT_DIR/deploy.sh"
echo ""
echo "  2. V√©rifier les services:"
echo "     docker compose -f docker-compose.prod.yml ps"
echo ""
echo "  3. Tester le site:"
echo "     curl -k https://196.203.120.35/"
echo ""
echo "  4. Suivre les logs auto-d√©ploiement:"
echo "     tail -f $LOG_FILE"
echo ""

log_info "üìö Documentation:"
echo "  - MOBILE_RESPONSIVE.md   (optimisations mobile)"
echo "  - CRON_AUTO_DEPLOY.md    (auto-d√©ploiement)"
echo "  - OPTIMISATIONS_SUMMARY.md (r√©capitulatif complet)"
echo "  - HTTPS_SETUP.md         (configuration SSL)"
echo ""

log_success "Configuration termin√©e! üéâ"

